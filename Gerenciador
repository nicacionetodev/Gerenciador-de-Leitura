import os
import customtkinter as ctk
from tkinter import messagebox

# CLASSES DE LÓGICA 

class Leitor:
    def __init__(self, nome, idade, cidade, estado, livros_digitais, livros_fisicos, preferencia, horas_estudo, horas_entretenimento):
        self.nome = nome
        self.idade = int(idade)
        self.cidade = cidade
        self.estado = estado
        self.livros_digitais = int(livros_digitais)
        self.livros_fisicos = int(livros_fisicos)
        self.preferencia = preferencia
        self.horas_estudo = float(horas_estudo)
        self.horas_entretenimento = float(horas_entretenimento)

    def total_livros_ano(self):
      return self.livros_digitais + self.livros_fisicos
    
    def localizacao(self):
       return f"{self.cidade}, {self.estado}"

    def to_txt(self):
        return (
            f"Nome: {self.nome}\n"
            f"Idade: {self.idade}\n"
            f"Cidade: {self.cidade}\n"
            f"Estado: {self.estado}\n"
            f"Livros Digitais: {self.livros_digitais}\n"
            f"Livros Físicos: {self.livros_fisicos}\n"
            f"Preferência: {self.preferencia}\n"
            f"Horas Estudo: {self.horas_estudo}\n"
            f"Horas Entretenimento: {self.horas_entretenimento}\n"
            f"===\n"
        )

    def from_txt(bloco):
      linhas = bloco.strip().split('\n')
      dados_brutos = {}
      for linha in linhas:
            if ":" in linha:
                  chave, valor = linha.split(":", 1)
                  dados_brutos[chave.strip()] = valor.strip()

      # Mapeamento manual das chaves com nomes corretos (sem acentos)
      campos_corretos = {
            "Nome": "nome",
            "Idade": "idade",
            "Cidade": "cidade",
            "Estado": "estado",
            "Livros Digitais": "livros_digitais",
            "Livros Físicos": "livros_fisicos",
            "Preferência": "preferencia",
            "Horas Estudo": "horas_estudo",
            "Horas Entretenimento": "horas_entretenimento"
      }

      dados_convertidos = {
            campos_corretos[chave]: valor
            for chave, valor in dados_brutos.items()
            if chave in campos_corretos
      }

      return Leitor(**dados_convertidos)

class GerenciadorLeitoresTXT:
    def __init__(self, caminho_arquivo="leitores.txt"):
        self.caminho_arquivo = caminho_arquivo
        self.leitores = self.carregar()

    def carregar(self):
        try:
            with open(self.caminho_arquivo, "r", encoding="utf-8") as f:
                blocos = f.read().split("===\n")
                return [Leitor.from_txt(b) for b in blocos if b.strip()]
        except FileNotFoundError:
            return []

    def salvar(self):
        with open(self.caminho_arquivo, "w", encoding="utf-8") as f:
            for leitor in self.leitores:
                f.write(leitor.to_txt())

    def adicionar(self, leitor):
        self.leitores.append(leitor)
        self.salvar()

    def listar(self):
        return self.leitores

    def deletar(self, nome):
        self.leitores = [l for l in self.leitores if l.nome != nome]
        self.salvar()
   
    def filtrar_leitores(self, idade_min=None, idade_max=None, estado=None, nivel=None):
      resultados = []

      for leitor in self.leitores:
            if idade_min is not None and leitor.idade < idade_min:
                  continue
            if idade_max is not None and leitor.idade > idade_max:
                  continue
            if estado and estado.lower() not in leitor.estado.lower():
                  continue
            if nivel:
                  nivel_leitor = AnalisadorLeitura(leitor).classificar_nivel()
                  if nivel.lower() not in nivel_leitor.lower():
                        continue
            resultados.append(leitor)
      
    def ordenar(self, criterio):
            if criterio == "Idade":
                  return sorted(self.leitores, key=lambda l: l.idade)
            elif criterio == "Localização":
                  return sorted(self.leitores, key=lambda l: l.estado)
            elif criterio == "Nível de Leitor":
                  def nivel(l):
                        n = AnalisadorLeitura(l).classificar_nivel()
                        ordem = {" Novato": 0, "Leitor Casual": 1, "Amante de Livros": 2, "Machado de Assis": 3}
                        return ordem.get(n, -1)
                  return sorted(self.leitores, key=nivel, reverse=True)
            elif criterio == "Recente":
                  return list(reversed(self.leitores))
            else:
                  return self.leitores

      
class AnalisadorLeitura:
    def __init__(self, leitor):
        self.leitor = leitor

    def estimativa_5_anos(self):
        total_anual = self.leitor.total_livros_ano()
        return total_anual * 5

    def estimativa_crescimento_10_anos(self):
        crescimento_total = 0
        atual = self.leitor.total_livros_ano()
        for ano in range(1, 11):
            crescimento_total += atual + (ano * 12)
        return crescimento_total

    def horas_estudo_anuais(self):
        return self.leitor.horas_estudo * 52

    def horas_entretenimento_anuais(self):
        return self.leitor.horas_entretenimento * 52

    def classificar_nivel(self):
        total = self.leitor.total_livros_ano()
        if total <= 4:
            return " Novato"
        elif total <= 12:
            return "Leitor Casual"
        elif total <= 24:
            return "Amante de Livros"
        else:
            return "Machado de Assis"



# GUI 

class APPGui:
    def __init__(self):
        ctk.set_appearance_mode("Dark")
        ctk.set_default_color_theme("dark-blue")

        self.app = ctk.CTk()
        self.app.title("Gerenciador de Leitura")
        self.app.geometry("800x600")
        

        self.gerenciador = GerenciadorLeitoresTXT()
        self.interface()

    def interface(self):
        container = ctk.CTkFrame(self.app)
        container.pack(expand=True)

        # Frame do formulário
        self.frame_form = ctk.CTkFrame(container, corner_radius=15, fg_color="#2a2a2a")
        self.frame_form.grid(row=0, column=0, padx=20, pady=20)

        # Centralizar as colunas dentro do frame
        self.frame_form.grid_columnconfigure(0, weight=1)
        self.frame_form.grid_columnconfigure(1, weight=1)

        self.entrada_nome = ctk.CTkEntry(self.frame_form, placeholder_text="Nome", **self.estilo_entry)
        self.entrada_nome.grid(row=0, column=0, padx=10, pady=5)

        self.entrada_idade = ctk.CTkEntry(self.frame_form, placeholder_text="Idade", **self.estilo_entry)
        self.entrada_idade.grid(row=0, column=1, padx=10, pady=5)

        self.entrada_cidade = ctk.CTkEntry(self.frame_form, placeholder_text="Cidade", **self.estilo_entry)
        self.entrada_cidade.grid(row=1, column=0, padx=10, pady=5)

        self.entrada_estado = ctk.CTkOptionMenu(self.frame_form, values=[
            "AC - Acre", "AL - Alagoas", "AP - Amapá", "AM - Amazonas", "BA - Bahia", "CE - Ceará",
            "DF - Distrito Federal", "ES - Espírito Santo", "GO - Goiás", "MA - Maranhão", "MT - Mato Grosso",
            "MS - Mato Grosso do Sul", "MG - Minas Gerais", "PA - Pará", "PB - Paraíba", "PR - Paraná",
            "PE - Pernambuco", "PI - Piauí", "RJ - Rio de Janeiro", "RN - Rio Grande do Norte",
            "RS - Rio Grande do Sul", "RO - Rondônia", "RR - Roraima", "SC - Santa Catarina",
            "SP - São Paulo", "SE - Sergipe", "TO - Tocantins"
        ],font=("Segoe UI", 13), corner_radius=10)
        self.entrada_estado.set("PE - Pernambuco")
        self.entrada_estado.grid(row=1, column=1, padx=10, pady=5)

        self.entrada_digitais = ctk.CTkEntry(self.frame_form, placeholder_text="Livros Digitais", **self.estilo_entry)
        self.entrada_digitais.grid(row=2, column=0, padx=10, pady=5)

        self.entrada_fisicos = ctk.CTkEntry(self.frame_form, placeholder_text="Livros Físicos", **self.estilo_entry)
        self.entrada_fisicos.grid(row=2, column=1, padx=10, pady=5)

        self.preferencia = ctk.CTkOptionMenu(self.frame_form, values=["Digital", "Físico"],font=("Segoe UI", 13), fg_color="#fa8908", dropdown_fg_color="#ff9419", text_color="white", button_color="#e47e0b", button_hover_color="#c55900c7",corner_radius=10)
        self.preferencia.set("Digital")
        self.preferencia.grid(row=3, column=0, padx=10, pady=5)

        self.entrada_estudo = ctk.CTkEntry(self.frame_form, placeholder_text="Horas Estudo/Semana", **self.estilo_entry)
        self.entrada_estudo.grid(row=3, column=1, padx=10, pady=5)

        self.entrada_entretenimento = ctk.CTkEntry(self.frame_form, placeholder_text="Horas Entretenimento/Semana", **self.estilo_entry)
        self.entrada_entretenimento.grid(row=4, column=0, columnspan=2, padx=10, pady=5)

        self.botao_salvar = ctk.CTkButton(self.frame_form, text="Salvar Leitor", command=self.salvar_leitor, **self.estilo_botao)
        self.botao_salvar.grid(row=5, column=0, columnspan=2, pady=10)

        # Frame da lista
        self.frame_lista = ctk.CTkFrame(self.app)
        self.frame_lista.pack(fill="both", expand=True, padx=20, pady=10)

        self.atualizar_lista_leitores()

        # Filtros (no canto inferior direito com place)
        self.frame_filtro = ctk.CTkFrame(self.app, fg_color="transparent")
        self.frame_filtro.place(relx=1.0, rely=1.0, anchor="se", x=-10, y=-10)

        self.opcoes_filtro = ctk.CTkOptionMenu(self.frame_filtro, values=["Idade", "Localização", "Nível de Leitor", "Recente"], fg_color="#fa8908", dropdown_fg_color="#ff9419", text_color="white", button_color="#e47e0b", button_hover_color="#fa7609c8", corner_radius=10, font=("Helvetica", 12, "bold"))
        self.opcoes_filtro.set("Idade")
        self.opcoes_filtro.pack(side="left", padx=5)

        self.botao_aplicar_filtro = ctk.CTkButton(self.frame_filtro, text="Filtrar 🔎", width=60, height=28, command=self.aplicar_filtro, fg_color="#e47e0b", hover_color="#fa7609c8", text_color="white", corner_radius=10, font=("Helvetica", 12, "bold"))
        self.botao_aplicar_filtro.pack(side="left", padx=5)

    estilo_botao = {
        "hover_color": "#215a0f",   
        "fg_color": "#39a130",      
        "text_color": "white",
        "corner_radius": 10,        
        "font": ("Helvetica", 14, "bold")
    }    
    estilo_entry = {
    "border_width": 0,
    "corner_radius": 10, 
    "font": ("Segoe UI", 13),
    }


        #Validações

    def validar_dados(self):
            self.resetar_cores_campos()
            erros = False

            def marcar_erro(entry_widget):
                entry_widget.configure(border_color="red", border_width=2)

            def limpar_borda(entry_widget):
                entry_widget.configure(border_color="gray", border_width=1)

            campos_texto = [self.entrada_nome, self.entrada_cidade]
            for campo in campos_texto:
                if not campo.get().strip():
                    marcar_erro(campo)
                    erros = True
                else:
                    limpar_borda(campo)

            try:
                int(self.entrada_idade.get())
                limpar_borda(self.entrada_idade)
            except ValueError:
                marcar_erro(self.entrada_idade)
                erros = True

            for campo in [self.entrada_digitais, self.entrada_fisicos]:
                try:
                    int(campo.get())
                    limpar_borda(campo)
                except ValueError:
                    marcar_erro(campo)
                    erros = True

            for campo in [self.entrada_estudo, self.entrada_entretenimento]:
                try:
                    float(campo.get())
                    limpar_borda(campo)
                except ValueError:
                    marcar_erro(campo)
                    erros = True

            return not erros

    def resetar_cores_campos(self):
            campos = [
                self.entrada_nome,
                self.entrada_idade,
                self.entrada_cidade,
                self.entrada_digitais,
                self.entrada_fisicos,
                self.entrada_estudo,
                self.entrada_entretenimento
            ]
            for campo in campos:
                campo.configure(border_color="#3a7ebf")

    def aplicar_filtro(self):
      criterio = self.opcoes_filtro.get()
      leitores_ordenados = self.gerenciador.ordenar(criterio)
      self.exibir_resultados(leitores_ordenados)

    def filtrar_por_idade(self):
        idade_min = ctk.CTkInputDialog(text="Digite idade mínima:", title="Filtro por Idade").get_input()
        idade_max = ctk.CTkInputDialog(text="Digite idade máxima:", title="Filtro por Idade").get_input()

        try:
            idade_min = int(idade_min)
            idade_max = int(idade_max)
            filtrados = self.gerenciador.filtrar_leitores(idade_min=idade_min, idade_max=idade_max)
            self.exibir_resultados(filtrados)
        except:
            messagebox.showerror("Erro", "Idade inválida.")
    
    def filtrar_por_estado(self):
        estado = ctk.CTkInputDialog(text="Digite o estado (sigla ou nome):", title="Filtro por Localização").get_input()
        filtrados = self.gerenciador.filtrar_leitores(estado=estado)
        self.exibir_resultados(filtrados)
   
    def filtrar_por_nivel(self):
        nivel = ctk.CTkInputDialog(text="Digite o nível (Novato, Casual, Amante, Machado):", title="Filtro por Nível").get_input()
        filtrados = self.gerenciador.filtrar_leitores(nivel=nivel)
        self.exibir_resultados(filtrados)

    def exibir_leitores_recentes(self):
      self.aplicar_filtro()

    def exibir_resultados(self, lista):
        for widget in self.frame_lista.winfo_children():
            widget.destroy()

        for leitor in lista:
            linha = ctk.CTkFrame(self.frame_lista)
            linha.pack(fill="x", padx=5, pady=2)

            texto = f"{leitor.nome} ({leitor.idade}) - {leitor.cidade}/{leitor.estado}"
            ctk.CTkLabel(linha, text=texto).pack(side="left", fill="x", expand=True)

            ctk.CTkButton(linha, text="Exibir Relátorio-📊", width=30, command=lambda l=leitor: self.mostrar_relatorio(l)).pack(side="right", padx=5)
            ctk.CTkButton(linha, text="Editar Perfil-✏️", width=30, command=lambda l=leitor: self.editar_leitor(l)).pack(side="right", padx=5)
            ctk.CTkButton(linha, text="Deletar Perfil-🗑️", width=30, command=lambda l=leitor.nome: self.remover_leitor(l)).pack(side="right", padx=5)


    def salvar_leitor(self):
    
        if not self.validar_dados():
            messagebox.showerror("❌- Erro", "Preencha corretamente os campos destacados em vermelho.")
            return

        try:
            leitor = Leitor(
                nome=self.entrada_nome.get(),
                idade=self.entrada_idade.get(),
                cidade=self.entrada_cidade.get(),
                estado=self.entrada_estado.get(),
                livros_digitais=self.entrada_digitais.get(),
                livros_fisicos=self.entrada_fisicos.get(),
                preferencia=self.preferencia.get(),
                horas_estudo=self.entrada_estudo.get(),
                horas_entretenimento=self.entrada_entretenimento.get()
            )
            self.gerenciador.adicionar(leitor)
            messagebox.showinfo("Sucesso", "Leitor salvo com sucesso!")
            self.limpar_campos()
            self.atualizar_lista_leitores()
        except ValueError as e:
            messagebox.showerror("Erro de Validação", str(e))
        except Exception as e:
            messagebox.showerror("Erro", f"Ocorreu um erro: {e}")

    def limpar_campos(self):
        self.entrada_nome.delete(0, 'end')
        self.entrada_idade.delete(0, 'end')
        self.entrada_cidade.delete(0, 'end')
        self.entrada_estado.set("PE - Pernambuco")
        self.entrada_digitais.delete(0, 'end')
        self.entrada_fisicos.delete(0, 'end')
        self.entrada_estudo.delete(0, 'end')
        self.entrada_entretenimento.delete(0, 'end')
        self.preferencia.set("Digital")

    def atualizar_lista_leitores(self):
      for widget in self.frame_lista.winfo_children():
            widget.destroy()

      for leitor in self.gerenciador.listar():
            linha = ctk.CTkFrame(self.frame_lista)
            linha.pack(fill="x", padx=5, pady=2)

            texto = f"{leitor.nome} ({leitor.idade}) - {leitor.localizacao()}"
            ctk.CTkLabel(linha, text=texto).pack(side="left", fill="x", expand=True)

            # Botão de Relatório
            ctk.CTkButton(
                  linha, text="Exibir Relátorios📊", width=30, 
                  command=lambda l=leitor: self.mostrar_relatorio(l)
            ).pack(side="right", padx=2)

            # Botão de Editar
            ctk.CTkButton(
                  linha, text="Editar Perfil✏️", width=30, 
                  command=lambda l=leitor: self.editar_leitor(l)
            ).pack(side="right", padx=2)

            # Botão de Deletar
            ctk.CTkButton(
                  linha, text="Deletar Perfil🗑️", width=30, 
                  command=lambda l=leitor.nome: self.remover_leitor(l)
            ).pack(side="right", padx=2)

    def mostrar_relatorio(self, leitor):
            analise = AnalisadorLeitura(leitor)

            
            self.janela_relatorio = ctk.CTkToplevel(self.app)
            janela = self.janela_relatorio
            janela.title(f"Relatório de {leitor.nome}")
            janela.geometry("500x400")
            janela.resizable(False, False)

                    # Frame principal
            frame = ctk.CTkFrame(janela, fg_color="#1e1e1e", corner_radius=15)
            frame.pack(fill="both", expand=True, padx=20, pady=20)

            # Título
            titulo = ctk.CTkLabel(
                frame, text=f"📘 Relatório de Leitura de {leitor.nome}",
                font=("Segoe UI", 18, "bold"), text_color="#ffffff"
            )
            titulo.pack(anchor="w", padx=20, pady=(10, 5))

            # Bloco de informações
            info_basica = f"👋 Olá, {leitor.nome}!\nVocê tem {leitor.idade} anos e mora em {leitor.localizacao()}.\n\n"
            
            ctk.CTkLabel(
                frame, text=info_basica,
                font=("Segoe UI", 13), text_color="#cccccc", justify="left"
            ).pack(anchor="w", padx=20)

            # Estimativas
            estimativa_5 = analise.estimativa_5_anos()
            if estimativa_5 <= 20:
                nota = "⚠️ Você está lendo pouco. Que tal separar mais tempo para a leitura?"
            elif estimativa_5 <= 60:
                nota = "✅ Bom ritmo! Continue assim!"
            else:
                nota = "🔥 Impressionante! Você é um verdadeiro devorador de livros!"

            bloco_5anos = (
                f"\n📆 Estimativa de leitura em 5 anos: {estimativa_5} livros\n"
                f"{nota}"
            )
            ctk.CTkLabel(
                frame, text=bloco_5anos,
                font=("Segoe UI", 13), text_color="#cccccc", justify="left", wraplength=500
            ).pack(anchor="w", padx=20, pady=(5, 5))

            # Estimativa com aumento
            estimativa_10 = analise.estimativa_crescimento_10_anos()
            ctk.CTkLabel(
                frame,
                text=f"\n📈 Se você ler +1 livro/mês, alcançará {estimativa_10} livros em 10 anos!",
                font=("Segoe UI", 13), text_color="#cccccc", justify="left", wraplength=500
            ).pack(anchor="w", padx=20)

            # Horas de leitura e estudo
            horas_estudo = analise.horas_estudo_anuais()
            horas_entretenimento = analise.horas_entretenimento_anuais()
            ctk.CTkLabel(
                frame,
                text=(
                    f"\n🧠 Estudo anual: {horas_estudo}h\n"
                    f"🎮 Leitura por entretenimento: {horas_entretenimento}h"
                ),
                font=("Segoe UI", 13), text_color="#cccccc", justify="left").pack(anchor="w", padx=20, pady=(5, 5))

            # Nível do leitor
            nivel = analise.classificar_nivel()
            ctk.CTkLabel(
                frame,
                text=f"\n🏅 Nível de Leitor: {nivel}",
                font=("Segoe UI", 14, "bold"), text_color="#f1c40f", justify="left").pack(anchor="w", padx=20, pady=(5, 10))
   
   
   
    def remover_leitor(self, nome):
         self.gerenciador.deletar(nome)
         self.atualizar_lista_leitores()

    def editar_leitor(self, leitor):
      # Preenche os campos com os dados do leitor
      self.entrada_nome.delete(0, 'end')
      self.entrada_nome.insert(0, leitor.nome)

      self.entrada_idade.delete(0, 'end')
      self.entrada_idade.insert(0, leitor.idade)

      self.entrada_cidade.delete(0, 'end')
      self.entrada_cidade.insert(0, leitor.cidade)

      self.entrada_estado.set(leitor.estado)

      self.entrada_digitais.delete(0, 'end')
      self.entrada_digitais.insert(0, leitor.livros_digitais)

      self.entrada_fisicos.delete(0, 'end')
      self.entrada_fisicos.insert(0, leitor.livros_fisicos)

      self.preferencia.set(leitor.preferencia)

      self.entrada_estudo.delete(0, 'end')
      self.entrada_estudo.insert(0, leitor.horas_estudo)

      self.entrada_entretenimento.delete(0, 'end')
      self.entrada_entretenimento.insert(0, leitor.horas_entretenimento)

      # Ao salvar novamente, ele sobrescreve
      self.gerenciador.deletar(leitor.nome)
    

#FILTROS
    
    def filtrar_leitores(self, idade_min=None, idade_max=None, estado=None, nivel=None):
      resultados = []

      for leitor in self.leitores:
            if idade_min is not None and leitor.idade < idade_min:
                  continue
            if idade_max is not None and leitor.idade > idade_max:
                  continue
            if estado and estado.lower() not in leitor.estado.lower():
                  continue
            if nivel:
                  nivel_leitor = AnalisadorLeitura(leitor).classificar_nivel()
                  if nivel.lower() not in nivel_leitor.lower():
                         continue

            resultados.append(leitor)

      return resultados
    
    #Melhorias na Parte visual

    def feedback_visual_sucesso(self):
        campos = [
            self.entrada_nome,
            self.entrada_idade,
            self.entrada_cidade,
            self.entrada_digitais,
            self.entrada_fisicos,
            self.entrada_estudo,
            self.entrada_entretenimento
        ]

        for campo in campos:
            campo.configure(border_color="green", border_width=2)

        self.app.after(1500, lambda: self.resetar_bordas(campos))

    def resetar_bordas(self, campos):
        for campo in campos:
            campo.configure(border_color="#3a7ebf", border_width=1)
   
    def iniciar(self):
                self.app.mainloop()

if __name__ == "__main__":
    app = APPGui()
    app.iniciar()
